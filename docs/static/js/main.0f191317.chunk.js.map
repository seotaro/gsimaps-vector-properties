{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INITIAL_VIEW_STATE","longitude","latitude","zoom","minZoom","maxZoom","App","initialViewState","controller","getTooltip","object","info","key","geometry","type","coordinates","length","properties","property","html","className","style","backgroundColor","color","opacity","tooltip","getCursor","isHovering","data","renderSubLayers","props","tile","bbox","west","south","east","north","GeoJsonLayer","bounds","pickable","highlightColor","autoHighlight","getFillColor","f","getLineColor","lineWidthMinPixels","pointRadiusScale","pointRadiusUnits","pointRadiusMinPixels","id","repeat","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAOMA,EAAqB,CACzBC,UAAW,IACXC,SAAU,GACVC,KAAM,EACNC,QAAS,EACTC,QAAS,IA4GIC,MAzGf,WAoCE,OACE,eAAC,WAAD,WACE,eAAC,IAAD,CACEC,iBAAkBP,EAClBQ,YAAY,EACZC,WAAY,mBAxCF,SAACC,GACf,IAAKA,EACH,OAAO,KAGT,IAAIC,EAAO,GAWX,IAAK,IAAMC,KATXD,GAAQ,OACRA,GAAQ,oBACRA,GAAQ,OACRA,GAAI,oBAAiBD,EAAOG,SAASC,KAAjC,SACJH,GAAI,kCAA+BD,EAAOG,SAASE,YAAYC,OAA3D,SACJL,GAAQ,QAERA,GAAQ,sBACRA,GAAQ,OACUD,EAAOO,WAAY,CACnC,IAAMC,EAAWR,EAAOO,WAAWL,GACnCD,GAAI,cAAWC,EAAX,cAAoBM,EAApB,SAKN,OAHAP,GAAQ,QAGD,CACLQ,KAAK,GAAD,OAHNR,GAAQ,SAINS,UAAW,UACXC,MAAO,CACLC,gBAAiB,QACjBC,MAAO,QACPC,QAAS,MAWmBC,CAAhB,EAAGf,SACfgB,UAAW,qBAAGC,WAA8B,UAAY,QAJ1D,UAME,cAAC,IAAD,CACEC,KAAI,0EACJxB,QAAS,EACTC,QAAS,GAGTwB,gBAAiB,SAAAC,GAAU,IAAD,EAGpBA,EAAMC,KADRC,KAAQC,EAFc,EAEdA,KAAMC,EAFQ,EAERA,MAAOC,EAFC,EAEDA,KAAMC,EAFL,EAEKA,MAG7B,OAAO,IAAIC,IAAaP,EAAO,CAC7BF,KAAME,EAAMF,KACZU,OAAQ,CAACL,EAAMC,EAAOC,EAAMC,GAC5BG,UAAU,EACVC,eAAgB,CAAC,IAAK,IAAK,KAC3BC,eAAe,KAInBC,aAAc,SAAAC,GACZ,OAAQA,EAAE9B,SAASC,MACjB,IAAK,QACH,MAAO,CAAC,GAAI,GAAI,IAClB,QACE,MAAO,CAAC,IAAK,IAAK,OAIxB8B,aAAc,SAAAD,GACZ,OAAQA,EAAE9B,SAASC,MACjB,IAAK,QACL,IAAK,UACL,IAAK,eACH,MAAO,CAAC,IAAK,IAAK,IAAK,GACzB,QACE,MAAO,CAAC,IAAK,IAAK,OAIxB+B,mBAAoB,EAEpBC,iBAAkB,EAClBC,iBAAkB,SAClBC,qBAAsB,IAGxB,cAAC,IAAD,CAASC,GAAG,MAAMzC,YAAY,EAAM0C,QAAM,OAG5C,qBAAK9B,UAAU,cAAf,SACE,mBAAG+B,KAAK,kDACNC,OAAO,SACPC,IAAI,sBAFN,yHClGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0f191317.chunk.js","sourcesContent":["import DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport { MapView } from '@deck.gl/core';\nimport { MVTLayer } from '@deck.gl/geo-layers';\nimport './App.css';\nimport { Fragment } from 'react';\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 138.0,\n  latitude: 37.0,\n  zoom: 5,\n  minZoom: 4,\n  maxZoom: 16\n};\n\nfunction App() {\n  const tooltip = (object) => {\n    if (!object) {\n      return null;\n    }\n\n    let info = '';\n\n    info += '<ul>';\n    info += '<li>geometry</li>';\n    info += '<ul>';\n    info += `<li>type: ${object.geometry.type}</li>`;\n    info += `<li>coordinates.length: ${object.geometry.coordinates.length}</li>`;\n    info += '</ul>';\n\n    info += '<li>properties</li>';\n    info += '<ul>';\n    for (const key in object.properties) {\n      const property = object.properties[key];\n      info += `<li>${key} : ${property}</li>`;\n    }\n    info += '</ul>';\n    info += '</ul>';\n\n    return {\n      html: `${info}`,\n      className: 'tooltip',\n      style: {\n        backgroundColor: 'black',\n        color: 'white',\n        opacity: 0.75,\n      }\n    }\n\n  };\n\n  return (\n    <Fragment>\n      <DeckGL\n        initialViewState={INITIAL_VIEW_STATE}\n        controller={true}\n        getTooltip={({ object }) => tooltip(object)}\n        getCursor={({ isHovering }) => isHovering ? 'pointer' : 'grab'}\n      >\n        <MVTLayer\n          data={`https://cyberjapandata.gsi.go.jp/xyz/experimental_bvmap/{z}/{x}/{y}.pbf`}\n          minZoom={4}\n          maxZoom={16}\n\n          // tooltip を表示するにはサブレイヤーの pickable を有効にする。\n          renderSubLayers={props => {\n            const {\n              bbox: { west, south, east, north }\n            } = props.tile;\n\n            return new GeoJsonLayer(props, {\n              data: props.data,\n              bounds: [west, south, east, north],\n              pickable: true,\n              highlightColor: [255, 127, 127],\n              autoHighlight: true,\n            });\n          }}\n\n          getFillColor={f => {\n            switch (f.geometry.type) {\n              case 'Point':\n                return [96, 96, 96];\n              default:\n                return [192, 192, 192];\n            }\n          }}\n\n          getLineColor={f => {\n            switch (f.geometry.type) {\n              case 'Point':\n              case 'Polygon':\n              case 'MultiPolygon':\n                return [128, 128, 128, 0];\n              default:\n                return [128, 128, 128];\n            }\n          }}\n\n          lineWidthMinPixels={1}\n\n          pointRadiusScale={1}\n          pointRadiusUnits={'pixels'}\n          pointRadiusMinPixels={4}\n        />\n\n        <MapView id=\"map\" controller={true} repeat >\n        </MapView>\n      </DeckGL>\n      <div className=\"attribution\">\n        <a href=\"https://maps.gsi.go.jp/development/vt_expt.html\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\" >\n          © 国土地理院ベクトルタイル提供実験\n        </a>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}